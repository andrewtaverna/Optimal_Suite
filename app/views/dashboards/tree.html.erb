<% content_for :title do %>Edit Tree - Optimal Suite<% end %>

<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">

<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>

          <div class="">
            <div class="page-title">
              <div class="title_left" style="width:100%;">
                <h3>Edit Your Information Architecture</h3>
              </div>
            </div>

            <div class="clearfix"></div>

            <div class="row">
              <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="x_panel">
                  <div class="x_title">
                    <h2><%= @dashboard.title %></h2>

                    <div class="clearfix"></div>
                  </div>
                  <div class="x_content">

					<div class="row">
					<% unless @results.length > 0 %>
						<div class="col-md-4 col-sm-8 col-xs-8">
							<button type="button" class="btn btn-success"  onclick="demo_create();">Create</button>
							<button type="button" class="btn btn-warning" onclick="demo_rename();">Rename</button>
							<button type="button" class="btn btn-danger" onclick="test_delete(get_selected());">Delete</button>
						</div>
					<% end %>
					</div>


					<div class="row">
						<div class="col-md-7">
							<div id="jstree_demo" class="demo" style="margin-top:1em; min-height:200px;">
							</div>
						</div>
				  	</div>

                  </div>
                </div>
              </div>
            </div>
          </div>


<style>
	.jstree-anchor {
		color: black !important;
	}
</style>

<script>

// Not exactly beautiful 



var consolecheck = []


var count = [];

function get_tree(){
	var v = $('#jstree_demo').jstree(true).get_json('#', {flat:true});
	var i =0;

	var assign_length = v.length;
	var max = 0;

	for (var i=0; i < assign_length; i++) {
		if (parseInt(v[i].id) >= max) {
			max = v[i].id
		}		
	}
	max++;
	count = max;
}

function demo_create() {
	get_tree();
	var ref = $('#jstree_demo').jstree(true),
		sel = ref.get_selected();
	if(!sel.length) { return false; }
	sel = sel[0];
	console.log(tempNodeId)
	sel = ref.create_node(sel, {"id": tempNodeId ,"type":"default"});
	if(sel) {
		ref.edit(sel);
	}
//	get_tree();
};

var tempNodeId = "" + <%= Json.all.maximum(:id).next %>

$('#jstree_demo').on('create_node.jstree', function (e, data) {
	var tempDashId = "" + <%= @dashboard.id %>
	console.log(tempNodeId)
	var new_node = {
		'id': tempNodeId,
		'parent': data.node.parent,
		'text': data.node.text,
		'dashboardid': tempDashId
	}
	tempNodeId++
    var something = JSON.stringify(new_node);


	$.ajax({
	  url:"/jsons/",
	  type:"POST",
	  data: something,
	  contentType:"application/json; charset=utf-8",
	  dataType:"json",

	})

})

function demo_rename() {
	var ref = $('#jstree_demo').jstree(true),
		sel = ref.get_selected();
	if(!sel.length) { return false; }
	sel = sel[0];
	ref.edit(sel);
};

$('#jstree_demo').on('rename_node.jstree', function (e, data) {
	var tempDashId = "" + <%= @dashboard.id %>
	var new_node = {
		'id': data.node.id,
		'parent': data.node.parent,
		'text': data.node.text,
		'dashboardid': tempDashId
	}
    var somethingElse = JSON.stringify(new_node);

    <% unless @results.length > 0 %>

	$.ajax({
	  url:'/jsons/' + data.node.id,
	  type:"PUT",
	  data: somethingElse,
	  contentType:"application/json; charset=utf-8",
	  dataType:"json",

	})

	<% end %>
})

$('#jstree_demo').on('move_node.jstree', function (e, data) {
	var tempDashId = "" + <%= @dashboard.id %>
	var new_node = {
		'id': data.node.id,
		'parent': data.node.parent,
		'text': data.node.text,
		'dashboardid': tempDashId
	}
    var somethingElse = JSON.stringify(new_node);


	$.ajax({
	  url:'/jsons/' + data.node.id,
	  type:"PUT",
	  data: somethingElse,
	  contentType:"application/json; charset=utf-8",
	  dataType:"json",
	})

})

function test_delete(temporary) {
	var all_nodes = [];
	var count = 1;
	if (temporary == 1) {
	}
	else {
		all_nodes[0] = temporary;
		recursive_delete(temporary)
		all_nodes.reverse();
		$('#jstree_demo').jstree(true).delete_node(all_nodes);
	}


	function recursive_delete(delete_me) {
		var node = $('#jstree_demo').jstree(true).get_node(delete_me);

		for (var k in node.children) {
			if (node.children[k] != null) {
				all_nodes[count] = node.children[k];
				count = count + 1;
				recursive_delete(node.children[k]);
			}
		}
	}

}


function get_selected() {
	var ref = $('#jstree_demo').jstree(true);
	//actual node being deleted
	sel = ref.get_selected();
	if(!sel.length) { return false; }
	return sel;
}



$('#jstree_demo').on('delete_node.jstree', function (e, data) {
	var tempDashId = "" + <%= @dashboard.id %>
	var new_node = {
		'id': data.node.id,
		'parent': data.node.parent,
		'text': data.node.text,
		'dashboardid': tempDashId
	}
    var somethingElse = JSON.stringify(new_node);

    if (new_node.parent != "#") {
		$.ajax({
		  url:'/jsons/' + data.node.id,
		  type:"DELETE",
		  contentType:"application/json; charset=utf-8",
		  dataType:"json",

		})
    }
})


$(function () {
	var to = false;
	$('#demo_q').keyup(function () {
		if(to) { clearTimeout(to); }
		to = setTimeout(function () {
			var v = $('#demo_q').val();
			$('#jstree_demo').jstree(true).search(v);
		}, 250);
	});
	

	$('#jstree_demo').jstree({
			"core" : {
				"animation" : 0,
				"check_callback" : true,
		        'themes': {
		            'name': 'proton',
		            'responsive': true
		        },
			    'data' : {
			      "url" : "/jsons/u/" + "<%= @dashboard.id %>",
			      "success": function(data){
                     series = data;
            },
			      "dataType" : "json" // needed only if you do not supply JSON headers
			    }
			},

			"plugins" : [ <% unless @results.length > 0 %> "contextmenu", "dnd", <% end %> "search", "state", "types", "wholerow" ]
		});
});





// Csrf token stuff
$(function() {

    // This function gets cookie with a given name
    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    var csrftoken = getCookie('csrftoken');

    /*
    The functions below will create a header with csrftoken
    */

    function csrfSafeMethod(method) {
        // these HTTP methods do not require CSRF protection
        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
    }
    function sameOrigin(url) {
        // test that a given url is a same-origin URL
        // url could be relative or scheme relative or absolute
        var host = document.location.host; // host + port
        var protocol = document.location.protocol;
        var sr_origin = '//' + host;
        var origin = protocol + sr_origin;
        // Allow absolute or scheme relative URLs to same origin
        return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||
            (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||
            // or any other URL that isn't scheme relative or absolute i.e relative.
            !(/^(\/\/|http:|https:).*/.test(url));
    }

    $.ajaxSetup({
        beforeSend: function(xhr, settings) {
            if (!csrfSafeMethod(settings.type) && sameOrigin(settings.url)) {
                // Send the token to same-origin, relative URLs only.
                // Send the token only if the method warrants CSRF protection
                // Using the CSRFToken value acquired earlier
                xhr.setRequestHeader("X-CSRFToken", csrftoken);
            }
        }
    });

});
</script>
